.. _workflow:

Workflow
========

.. questions::

   - What is 
   - What problem do 

.. objectives::

   - Explain 

.. instructor-note::

   - 15 min teaching
   - 0 min exercises


Case structure
--------------

To setup a case, you need to have at least 3 directories in your case directory, namely system, constant and <initial time directory> (e.g. 0).

OpenFOAM cases are configured using plain text input files located across the three directories, in each input file, OpenFOAM uses a plain text dictionary format with keywords and values

system: contains input files for grid generators and solvers

    - controlDict
    - fvSchemes
    - fvSolution
    - fvOptions
    <system dictionaries>

constant: Contains values that are constant during simulation like transport properties of the fluid (viscosity models) and mesh coordinates

    - polyMesh
    <constant dictionaries>

<initial time directory>: contains initial fields of the flow e.g. velocity, pressure etc. and boundary conditions

    <field files>

Additional directories can be generated, depending on user cases, most common ones include e.g.:

    <result time directories>: field predictions as a function of iteration count or time
    postProcessing: data typically generated by function objects
    data conversion, e.g. VTK


controlDict
~~~~~~~~~~~

The controlDict dictionary is used to specify the main case controls. This includes, e.g. timing information, write format, and optional libraries that can be loaded at run time.

An example dictionary is shown below:



fvSchemes
~~~~~~~~~

An example dictionary is shown below:

fvSolution
~~~~~~~~~~

An example dictionary is shown below:

fvOptions
~~~~~~~~~

Many OpenFOAM applications contain equation systems that can be manipulated at run time via user-specified finite volume options, given by the shorthand fvOptions. These provide, e.g. additional source/sink terms, or enforce constraints.

Options include:

    Sources
    Corrections
    Constraints


Further information

Source code:

    $FOAM_SRC/fvOptions

API:

    grpFvOptions





Input types
-----------


OpenFOAM input dictionaries are designed to be human-readable ASCII text files, consisting of collections of keyword-value entries bounded by curly braces {}, e.g.

dictionary_name
{
    labelType       1;
    scalarType      1.0;
    vectorType      (0 0 0);
    wordType        word;
    stringType      "string";
    ...
}


The main basic entry types include:

.. list-table:: 
      :widths: 25 25 25 
      :header-rows: 1

      * - Type
        - Description
        - Example
      * - boolean
        - state
        - `on`, off, true, false
      * - label
        - integer
        - 123
      * - scalar
        - float
        - `123.456`
      * - word
        - a single word
        - value `value`
      * - string
        - quoted text
        - "this is a string value"
      * - list
        - a list of entries bounded by () braces
        - (0 1 2 3 4 5) 
      * - vector
        - a list of 3 values, nominally (x y z) components 
        - (0 0 0)
      * - sphericalTensor
        - a spherical tensor 
        - (0)
      * - symmTensor
        - a symmetric tensor defined by (xx xy xz yy yz zz)
        - (0 0 0 0 0 0)
      * - tensor
        - a nine component tensor defined by (xx xy xz yx yy yz zx zy zz)
        - `(0 0 0 0 0 0 0 0 0)`


Expressions
-----------

The Expressions functionality is a re-implementation of swak4Foam(SWiss Army Knife for Foam) created by Bernhard Gschaider and it was introduced since version v1912.
The Expressions syntax enables users to define custom expressions for use in a variety of scenarios that don’t exist yet in OpenFOAM, without the need to rely on coding in
C++, including:

    - pre-processing utilities
    - input dictionaries
    - boundary conditions
    - function objects (co-processing)
    - utilities, e.g. setting field values


Summary
- fvOptions and functionObject practically remove the need for
modifying the solver, as long as it captures your physics.
- Lot’s of fvOptions and functionObjects out there. Try and play with
them during the hands on!
There is a coded type of fvOption and functionObject, which
allows you to simply write you own C++ to be executed! Will be
compiled when the case runs, with no involvment from your side.
