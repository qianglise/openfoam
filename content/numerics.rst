.. _numerics:

Numerics
========

.. questions::

   - What is 
   - What problem do 

.. objectives::

   - Explain 

.. instructor-note::

   - 15 min teaching
   - 0 min exercises


What is OpenFOAM ?
------------------

- OpenFOAM® (for “Open-source Field Operation And Manipulation”) is an open source Computation Fluid Dynamics (CFD) solve released and developed primarily by OpenCFD Ltd since 2004. 

- It has a large user base across most areas of engineering and science, from both commercial and academic organizations. 

- OpenFOAM has an extensive range of features to solve anything from complex fluid flows involving chemical reactions, turbulence and heat transfer, to acoustics, solid mechanics and electromagnetics. 


Different variants of OpenFOAM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are two main variants of OpenFOAM:

    OpenCFD Ltd version (`www.openfoam.com <http://www.openfoam.com>`_):
        - New versions released twice a year (June-December)
        - Versions are named as (vYYMM) e.g. v1912
        - Website: https://www.openfoam.com

    OpenFOAM foundation version (`www.openfoam.org <http://www.openfoam.org>`_):
        - No defined date for new release 
        - Versions are named with with two digits like 4.1
        - Website: https://openfoam.org


One can read the history if interested:
https://www.openfoam.com/news/history


Which version to use?
~~~~~~~~~~~~~~~~~~~~~

It depends on the features you want to use

    - Check the website and release notes to see which one fits better to your framework
    - If both include the features you need, do some performance and accuracy benchmarks to see which one is better
    - Otherwise it is just matter of taste!

We will be using the OpenCFD Ltd version with vXXXXXX for the training




Case structure
--------------

To setup a case, you need to have at least 3 directories in your case directory, namely system, constant and <initial time directory> (e.g. 0).

OpenFOAM cases are configured using plain text input files located across the three directories, in each input file, OpenFOAM uses a plain text dictionary format with keywords and values

system: contains input files for grid generators and solvers

    - controlDict
    - fvSchemes
    - fvSolution
    - fvOptions
    <system dictionaries>

constant: Contains values that are constant during simulation like transport properties of the fluid (viscosity models) and mesh coordinates

    - polyMesh
    <constant dictionaries>

<initial time directory>: contains initial fields of the flow e.g. velocity, pressure etc. and boundary conditions

    <field files>

Additional directories can be generated, depending on user cases, most common ones include e.g.:

    <result time directories>: field predictions as a function of iteration count or time
    postProcessing: data typically generated by function objects
    data conversion, e.g. VTK


controlDict
~~~~~~~~~~~

The controlDict dictionary is used to specify the main case controls. This includes, e.g. timing information, write format, and optional libraries that can be loaded at run time.

An example dictionary is shown below:



fvSchemes
~~~~~~~~~

An example dictionary is shown below:

fvSolution
~~~~~~~~~~

An example dictionary is shown below:

fvOptions
~~~~~~~~~

Many OpenFOAM applications contain equation systems that can be manipulated at run time via user-specified finite volume options, given by the shorthand fvOptions. These provide, e.g. additional source/sink terms, or enforce constraints.

Options include:

    Sources
    Corrections
    Constraints


Further information

Source code:

    $FOAM_SRC/fvOptions

API:

    grpFvOptions





Input types
-----------


OpenFOAM input dictionaries are designed to be human-readable ASCII text files, consisting of collections of keyword-value entries bounded by curly braces {}, e.g.

dictionary_name
{
    labelType       1;
    scalarType      1.0;
    vectorType      (0 0 0);
    wordType        word;
    stringType      "string";
    ...
}


The main basic entry types include:

.. list-table:: 
      :widths: 25 25 25 
      :header-rows: 1

      * - Type
        - Description
        - Example
      * - boolean
        - state
        - `on`, off, true, false
      * - label
        - integer
        - 123
      * - scalar
        - float
        - `123.456`
      * - word
        - a single word
        - value `value`
      * - string
        - quoted text
        - "this is a string value"
      * - list
        - a list of entries bounded by () braces
        - (0 1 2 3 4 5) 
      * - vector
        - a list of 3 values, nominally (x y z) components 
        - (0 0 0)
      * - sphericalTensor
        - a spherical tensor 
        - (0)
      * - symmTensor
        - a symmetric tensor defined by (xx xy xz yy yz zz)
        - (0 0 0 0 0 0)
      * - tensor
        - a nine component tensor defined by (xx xy xz yx yy yz zx zy zz)
        - `(0 0 0 0 0 0 0 0 0)`


Expressions
-----------

The Expressions syntax enables users to define custom expressions for use in a variety of scenarios, including:

    - input dictionaries
    - boundary conditions
    - utilities, e.g. setting field values

The Expressions functionality is a re-implementation of swak4Foam created by Bernhard Gschaider and it was introduced since version v1912.

The following sections describe how to write the expressions and provide an overview of the range of functionality.






Summary
- fvOptions and functionObject practically remove the need for
modifying the solver, as long as it captures your physics.
- Lot’s of fvOptions and functionObjects out there. Try and play with
them during the hands on!
There is a coded type of fvOption and functionObject, which
allows you to simply write you own C++ to be executed! Will be
compiled when the case runs, with no involvment from your side.







OpenFOAM executables
• Unlike many other software, OpenFOAM does not have a unique
executable. For every solver, mesh generation etc. there is a separate
executable!
• You should run the right executable according to the solver you are
using!
• ‘simpleFoam’: if you use SIMPLE algorithm
• ‘icoFoam’: if you use PISO algorithm for laminar flow
• ...
• Check the documentation to see recommended solvers for different cases


OpenFOAM output files
• Similar to the input files, the output files are also in plain text
dictionary format




Meshing
-------

Mesh generation
~~~~~~~~~~~~~~~

There are a couple of mesher available:

- blockMesh – Block-structured hexahedral mesher
- snappyHexMesh – Unstructured hexa-dominated mesher
- cfMesh – Unstructured mesher with different available meshing strategies
- makeFaMesh - Create finite-area meshes from volume-mesh patches
- Other commercial mesh generation

blockMesh
+++++++++

blockMesh is a structured hexahedral mesh generator.

Key features:

    structured hex mesh
    built using blocks
    supports cell size grading
    supports curved block edges

Constraints:

    requires consistent block-to-block connectivity
    ordering of points is important

Well suited to simple geometries that can be described by a few blocks, but challenging to apply to cases with a large number of blocks due to book-keeping requirements, i.e. the need to manage point connectivity and ordering.

Command line usage:

blockMesh [OPTIONS]

The utility is controlled using a blockMeshDict dictionary, located in the case system directory, split into the following sections:

    points
    edges
    blocks
    patches


Mesh fully defined in one dictionary: blockMeshDict. Lives in system.
Manually define everything: vertices, blocks, curved edges, boundaries.

an example dictionary file ? 
e,g, file:///home/qiang/Downloads/day2_meshing.pdf


snappyHexMesh
+++++++++++++

snappyHexMesh is a fully parallel, split hex, mesh generator that guarantees a minimum mesh quality. Controlled using OpenFOAM dictionaries, it is particularly well suited to batch driven operation.

Key features:

    starts from any pure hex mesh (structured or unstructured)
    reads geometry in triangulated formats, e.g. in stl, obj, vtk
    no limit on the number of input surfaces
    can use simple analytically-defined geometry, e.g. box, sphere, cone
    generates prismatic layers
    scales well when meshing in parallel
    can work with dirty surfaces, i.e. non-watertight surfaces

Meshing controls are set in the snappyHexMeshDict located in the case system directory. This has five main sections, described by the following:

    Geometry: specification of the input surfaces
    Castellation: starting from any pure hex mesh, refine and optionally load balance when running in parallel. The refinement is specified both according to surfaces, volumes and gaps
    Snapping: guaranteed mesh quality whilst morphing to geometric surfaces and features
    Layers: prismatic layers are inserted by shrinking an existing mesh and creating an infill, subject to the same mesh quality constraints
    Mesh quality: mesh quality settings enforced during the snapping and layer addition phases
    Global


Creating the mesh is a 3-step process.
1. Castellation
2. Snapping
3. Adding layers


The overall meshing process is summarised by the figure below:
https://doc.openfoam.com/2312/tools/pre-processing/mesh/generation/snappyhexmesh/figures/snappyHexMesh-overview-small.png

This includes:

    creation of the background mesh using the blockMesh utility (or any other hexahedral mesh generator)
    extraction of features on the surfaces with surfaceFeatureExtract utility
    setting up the snappyHexMeshDict input dictionary
    running snappyHexMesh in serial or parallel


Running snappyHexMesh will produce a separate directory for each step of the meshing process. The mesh in constant will be intact.
Run snappyHexMesh –overwrite to write only the final mesh directly to constant


Mesh manipulation
~~~~~~~~~~~~~~~~~

The following tools are useful when manipulating the mesh, e.g. scaling the geometry, identifying patches and creating sets and zones for physical models and post-processing.

    surfaceTransformPoints
    topoSet


Mesh conversion
~~~~~~~~~~~~~~~


Conversion

    ccmToFoam
    fireToFoam
    fluentMeshToFoam, fluent3DMeshToFoam
    gmshToFoam
  

Conclusions
• OpenFOAM has several meshing tools, suitable for both simple
and complex geometries.
• It’s possible to do a lot with snappy, including industrial flows.
• That being said, it seems to take a lot of parameter tweeking and
one has to know the tool well.
• I have heard from many that cfMesh is less painful to work with.
Try that as well.
• Generally, speciallized commercial meshers are still quite a bit
better in my opinion.
